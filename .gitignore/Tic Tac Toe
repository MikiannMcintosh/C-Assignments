#include <iostream>
using namespace std;

char matrix[3][3] = {'*','*','*','*','*','*','*','*','*'}; // 3:3 board
                                                          // With 9 spaces
char player = 'X'; //Player 1
//There's a draw in the game
//counter variable Will count the number of
//times the player has played the game
int z;
void Draw() //Will display the game board
{
    cout << "Tic Tac Toe" << endl; //Name of the game
    for (int i = 0; i < 3; i++)
    {
        for (int j = 0; j < 3; j++)
        {
            cout << matrix[i][j] << " "; //i represents the rows &
                                        // j represents the columns
                                       // " " will allow it to display neatly

        }
        cout << endl; //After printing one row it'll add a new line
                      //And then add a new row and print the second row
    }

}

void Input()//A function for input
{
    int a; //The defined integer for input
    cout << "Type the row and column number: "; //Message to user
    cin >> a; //Row and column number stored in a

    if (a == 1)
    {
        if (matrix[0][0] == '*') //Checks to see if space is already occupied
            matrix[0][0] = player;  //Prints the character in the matrix
                                   //Will change the text to Chars X & then 0
        else
        {
            cout << "This row and column is already occupied. Try again! " << endl;
            Input(); //Need to call your input function again in order for this to work
        }

    }
    else if (a == 2)
    {
        if (matrix[0][1] == '*')
            matrix [0][1] = player;
        else
        {
            cout << "This row and column is already occupied. Try again! " << endl;
            Input();
        }
    }
    else if (a == 3)
    {
        if (matrix[0][2] == '*')
            matrix [0][2] = player;
        else
        {
            cout << "This row and column is already occupied. Try again! "<< endl;
            Input();
        }
    }
    else if (a == 4)
    {
        if (matrix[1][0] == '*')
            matrix [1][0] = player;
        else
        {
            cout << "This row and column is already occupied. Try again! " << endl;
            Input();
        }
    }

    else if (a == 5)
    {
        if (matrix[1][1] == '*')
            matrix [1][1] = player;
        else
        {
            cout << "This row and column is already occupied. Try again! " << endl;
            Input();
        }
    }

    else if (a == 6)
    {
        if (matrix[1][2] == '*')
            matrix [1][2] = player;
        else
        {
            cout << "This row and column is already occupied. Try again! " << endl;
            Input();
        }
    }

    else if (a == 7)
    {
        if (matrix[2][0] == '*')
            matrix [2][0] = player;
        else
        {
            cout << "This row and column is already occupied. Try again! " << endl;
            Input();
        }
    }

    else if (a == 8)
    {
        if (matrix[2][1] == '*')
            matrix [2][1] = player;
        else
        {
            cout << "This row and column is already occupied. Try again! " << endl;
            Input();
        }
    }

    else if (a == 9)
    {
        if (matrix[2][2] == '*')
            matrix [2][2] = player;
        else
        {
            cout << "This row and column is already occupied. Try again! " << endl;
            Input();
        }
    }


}

void PlayerTwo () //Changes to the 2nd player
{
   if (player == 'X')

       player = 'O';
   else
       player = 'X';
}

char Win () //Checks to see who wins
{
    //First Player
    if (matrix[0][0] == 'X' && matrix[0][1] == 'X' && matrix[0][2] == 'X')
        //If each row is X, Player 1 is the winner
        return 'X';
    if (matrix[1][0] == 'X' && matrix[1][1] == 'X' && matrix[1][2] == 'X')
        return 'X';
    if (matrix[2][0] == 'X' && matrix[2][1] == 'X' && matrix[2][2] == 'X')
        return 'X';

    if (matrix[0][0] == 'X' && matrix[1][0] == 'X' && matrix[2][0] == 'X')
        //If each column is X, Player 1 is the winner
        return 'X';
    if (matrix[0][1] == 'X' && matrix[1][1] == 'X' && matrix[2][1] == 'X')
        return 'X';
    if (matrix[0][2] == 'X' && matrix[1][2] == 'X' && matrix[2][2] == 'X')
        return 'X';

    if (matrix[0][0] == 'X' && matrix[1][1] == 'X' && matrix[2][2] == 'X')
        //Main Diagonal (00, 11, 22)
        // 00 01 02
        //  10 11 12
        //   20 21 22
        // If each diagonal is X, then Player 1 is the winner
        return 'X';
    if (matrix[2][0] == 'X' && matrix[1][1] == 'X' && matrix[0][2] == 'X')
        //Second diagonal (20, 11, 02)
        return 'X';

    //Player 2
    if (matrix[0][0] == 'O' && matrix[0][1] == '0' && matrix[0][2] == '0')
        return 'O';
    if (matrix[1][0] == 'O' && matrix[1][1] == 'O' && matrix[1][2] == 'O')
        return 'O';
    if (matrix[2][0] == 'O' && matrix[2][1] == 'O' && matrix[2][2] == 'O')
        return 'O';

    if (matrix[0][0] == 'O' && matrix[1][0] == 'O' && matrix[2][0] == 'O')
        return 'O';
    if (matrix[0][1] == 'O' && matrix[1][1] == 'O' && matrix[2][1] == 'O')
        return 'O';
    if (matrix[0][2] == 'O' && matrix[1][2] == 'O' && matrix[2][2] == 'O')
        return 'O';

    if (matrix[0][0] == 'O' && matrix[1][1] == 'O' && matrix[2][2] == 'O')
        return 'O';
    if (matrix[2][0] == 'O' && matrix[1][1] == 'O' && matrix[0][2] == 'O')
        return 'O';

    return '/'; //If the function doesn't return a value in some of these if
               // statements then it'll return default aka the slash
}

int main()
{
    z = 0;
    Draw ();
    while (1) //Will loop forever
{
    z++;
    Input(); //Checks for the input then draws
    Draw();
    if (Win() == 'X')
    {
        cout << "Player 1 wins!"<< endl; //endl will allow it to display neater
        break;
    }
    else if (Win() =='O')
    {
        cout << "Player 2 wins!"<< endl;
        break;
    }
    else if (Win() == '/' && z == 9)
    {
        cout << "It's a draw" << endl;
        break;
    }
    PlayerTwo();

}

    return 0;
}
